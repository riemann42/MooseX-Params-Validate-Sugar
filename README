NAME
    MooseX::Params::Validate::Sugar - Sugar for MooseX::Params::Validate

VERSION
      This document describes v0.01_02 of MooseX::Params::Validate::Sugar - released October 29, 2013 as part of MooseX-Params-Validate-Sugar.

SYNOPSIS
        {

            package MyApp;
            use MooseX::Params::Validate::Sugar;

            method 'multiply' => 
                with_params ( first  => { isa => 'Int' }, second => { isa => 'Int', default => 7 }),
                via {
                    my ( $self, %params ) = @_;
                    return $params{first} * $params{second};
                };

            method 'divide' => 
                with_params ( first  => { isa => 'Int' }, second => { isa => 'Int', default => 7 }),
                via { return $_{first} / $_{second}; };

            method 'simple' => sub { 42 };
        }

        my $app = MyApp->new();
        say $app->multiply( first => 6 );  # Says 42
        say $app->divide( first => 42 );   # Says 6
        say $app->simple;                  # Says 42

DESCRIPTION
    This adds some pretty sugar to MooseX::Params::Validate. It allows you
    to do a few things with MX:P:V that are normally a little cumbersome
    (such as mixing positional and named paramaters).

FUNCTIONS
  with_params (%params)
    Alias for with_hash_params

  with_hash_params (%params)
    Used to create a filter subroutine that uses
    MooseX::Params::Validate::validated_hash to convert paramaters. %params
    is passed to validated_hash. To make the syntax a little simplar, any
    scalar ref is converted to { isa => $_ }.

  with_pos_params (@params)
    This allows positional paramaters. It can be combined with
    with_hash_params If used first.

    The syntax is the same as with_hash_params, and from the perspective of
    your method it is the same. In other words, your method will still see a
    hash.

    MX_PARAMS_VALIDATE_ALLOW_EXTRA will generate an error if used. Please
    check out with_slurpy_params and with_trailing_list.

  with_slurpy_params ($spec)
    This will slurp up all remaining items in @_, if any, and check to make
    sure they match the type in the spec listed.

    Currently the spec is limited to only coerce, isa, and optional. If
    optional is not set, then failing to call with at least one item will
    cause firey death.

    The slurped up list is available to the method via $_{LIST}.

  with_trailing_list
    This populates $_{LIST} with all remaining items.

  method $name, $param_filter, $sub_reference;
    Define a method. This is usually called as:

        method $name => with_params (%params), via { ... };

    For the method created, the @_ variable is populated with the instance,
    then a hash containing the validated / coerced options.

        # Unpack @_
        my ($self, %params ) = @_

    You can also access these via the global variable %_. $_{self} is the
    instance.

        #Perform division
        return $params{numerator} / $params{denominator};

    Please note that %_ is a tied hash. Trying to change it or access
    non-existant keys will generate an error. Because of this, it is
    recommened to generally use this method, rather than the params method.

    Via is imported from Moose::Util::TypeConstraints to avoid a conflict.

SUPPORT
  Websites
    The following websites have more information about this module, and may
    be of help to you. As always, in addition to those websites please use
    your favorite search engine to discover more resources.

    *   Search CPAN

        The default CPAN search engine, useful to view POD in HTML format.

        <http://search.cpan.org/dist/MooseX-Params-Validate-Sugar>

    *   CPAN Testers Dependencies

        The CPAN Testers Dependencies is a website that shows a chart of the
        test results of all dependencies for a distribution.

        <http://deps.cpantesters.org/?module=MooseX::Params::Validate::Sugar
        >

    *   CPANTS

        The CPANTS is a website that analyzes the Kwalitee ( code metrics )
        of a distribution.

        <http://cpants.perl.org/dist/overview/MooseX-Params-Validate-Sugar>

    *   CPAN Testers

        The CPAN Testers is a network of smokers who run automated tests on
        uploaded CPAN distributions.

        <http://www.cpantesters.org/distro/M/MooseX-Params-Validate-Sugar>

    *   CPAN Testers Matrix

        The CPAN Testers Matrix is a website that provides a visual overview
        of the test results for a distribution on various Perls/platforms.

        <http://matrix.cpantesters.org/?dist=MooseX-Params-Validate-Sugar>

  Email
    You can email the author of this module at "EALLENIII at cpan.org"
    asking for help with any problems you have.

  Bugs / Feature Requests
    Please report any bugs or feature requests by email to
    "bug-moosex-params-validate-sugar at rt.cpan.org", or through the web
    interface at
    <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=MooseX-Params-Validate-S
    ugar>. You will be automatically notified of any progress on the request
    by the system.

  Source Code
    The code is open to the world, and available for you to hack on. Please
    feel free to browse it and play with it, or whatever. If you want to
    contribute patches, please send me a diff or prod me to pull from your
    repository :)

    <https://github.com/riemann42/MooseX-Params-Validate-Sugar>

      git clone git://github.com/riemann42/MooseX-Params-Validate-Sugar.git

AUTHOR
    Edward Allen <ealleniii@cpan.org>

COPYRIGHT AND LICENSE
    This software is copyright (c) 2012 by Edward J. Allen III.

    This is free software; you can redistribute it and/or modify it under
    the same terms as the Perl 5 programming language system itself.

DISCLAIMER OF WARRANTY
    BECAUSE THIS SOFTWARE IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
    FOR THE SOFTWARE, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN
    OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
    PROVIDE THE SOFTWARE "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER
    EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
    WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE
    ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE SOFTWARE IS WITH
    YOU. SHOULD THE SOFTWARE PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL
    NECESSARY SERVICING, REPAIR, OR CORRECTION.

    IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
    WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
    REDISTRIBUTE THE SOFTWARE AS PERMITTED BY THE ABOVE LICENCE, BE LIABLE
    TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL, OR
    CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE
    SOFTWARE (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING
    RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A
    FAILURE OF THE SOFTWARE TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF
    SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH
    DAMAGES.

